#include <stdlib.h>
#include "conf.h"
#include "user.h"
#include "message.h"
#include "tcptransport.h"
#include <vector>
#include <string>
#include <pthread.h>
#include <queue>

using namespace std;

class Master;

struct SlaveNode
{
	string ip;
	long long llTotalMemUser;
	long long llCurrMemUsed;
	long long llCurrCPUUsed;
	enum Status {INIT, RUNNING, STOPPED} m_Status;   // system status
};

typedef struct TCPInfo0
{
	TCPTransport tcp;
	string ip;
	int inport;
	int outport;
	Master *m;
}TCPInfo;

struct addrStruct
{
	string addr;
	string base;
};

typedef struct jobO
{
	int jobtype;
	int j_Status; //0为waiting,1为running，2为finish
}job;

typedef struct slavejob0
{
	string slave;
	queue<job> slaveJobList;
}slaveJob;

class Master
{
public:
	Master();
	~Master();

public:
	int init();
	int	run();
	int	stop();
	int processSysCmd(const string& ip, const int port,  const User* user, const int32_t key, int id, MantouMsg* msg);
	void startSlave(const std::string& addr, const std::string& base, const std::string& option, const std::string& log = "");
	static void* getActiveSlaves(void *s);
	static void* System(void *s);
	static void* Shell(void *s);
	static void* SlaveCom(void* s);
	void getSlaveStat();
	void sendCmd(string cmd);
	
	static void* start(void *s);
public:
	enum Status {INIT, RUNNING, STOPPED} m_Status;   // system status
	ConfReader cr;
	vector<string> slave_list;
	vector<struct SlaveNode> activeSlaves;
	bool listening;
	vector<slaveJob> jobList;
private:
	static void* get(void* s);
//	void timefunc(int sig);
private:
	int inCmdPort;
	int outCmdPort;
	string tmp1;
	string tmp2;
};


void timefunc(int sig);      /* 定时事件代码 */
void clock(int second);
